import { PrismaClient, UserRole, MacroType } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting database seeding...');

  // Create admin user
  const hashedPassword = await bcrypt.hash('admin123', 10);
  
  const admin = await prisma.user.upsert({
    where: { email: 'admin@phinpt.com' },
    update: {},
    create: {
      username: 'admin',
      email: 'admin@phinpt.com',
      password: hashedPassword,
      fullName: 'Phi Nguy·ªÖn PT',
      phone: '0123456789',
      role: UserRole.ADMIN,
    },
  });

  console.log('‚úÖ Admin user created:', admin.email);

  // Create sample client
  const clientPassword = await bcrypt.hash('client123', 10);
  
  const client = await prisma.user.upsert({
    where: { email: 'client@example.com' },
    update: {},
    create: {
      username: 'client_demo',
      email: 'client@example.com',
      password: clientPassword,
      fullName: 'Nguy·ªÖn VƒÉn A',
      phone: '0987654321',
      role: UserRole.CLIENT,
    },
  });

  console.log('‚úÖ Sample client created:', client.email);

  // Create sample testimonials
  const testimonials = [
    {
      name: 'Nguy·ªÖn Minh Anh',
      content: 'Sau 3 th√°ng t·∫≠p v·ªõi PT Phi, t√¥i ƒë√£ gi·∫£m ƒë∆∞·ª£c 8kg v√† c·∫£m th·∫•y kh·ªèe kho·∫Øn h∆°n r·∫•t nhi·ªÅu. Ch∆∞∆°ng tr√¨nh t·∫≠p r·∫•t khoa h·ªçc v√† ph√π h·ª£p.',
      rating: 5,
    },
    {
      name: 'Tr·∫ßn VƒÉn ƒê·ª©c',
      content: 'PT Phi r·∫•t nhi·ªát t√¨nh v√† chuy√™n nghi·ªáp. Nh·ªù c√≥ s·ª± h∆∞·ªõng d·∫´n t·∫≠n t√¨nh, t√¥i ƒë√£ tƒÉng ƒë∆∞·ª£c 5kg c∆° trong 4 th√°ng.',
      rating: 5,
    },
  ];

  for (const testimonial of testimonials) {
    await prisma.testimonial.upsert({
      where: { id: `testimonial-${testimonial.name.replace(/\s+/g, '-').toLowerCase()}` },
      update: {},
      create: {
        id: `testimonial-${testimonial.name.replace(/\s+/g, '-').toLowerCase()}`,
        ...testimonial,
      },
    });
  }

  console.log('‚úÖ Sample testimonials created');

  // Create sample videos
  const videos = [
    {
      title: 'B√†i t·∫≠p cardio c∆° b·∫£n t·∫°i nh√†',
      youtubeId: 'dQw4w9WgXcQ',
      description: 'H∆∞·ªõng d·∫´n c√°c b√†i t·∫≠p cardio ƒë∆°n gi·∫£n c√≥ th·ªÉ th·ª±c hi·ªán t·∫°i nh√†',
      category: 'Cardio',
    },
    {
      title: 'T·∫≠p ng·ª±c cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
      youtubeId: 'dQw4w9WgXcQ',
      description: 'C√°c b√†i t·∫≠p ph√°t tri·ªÉn c∆° ng·ª±c hi·ªáu qu·∫£ d√†nh cho newbie',
      category: 'Strength',
    },
  ];

  for (const video of videos) {
    await prisma.video.upsert({
      where: { id: `video-${video.title.replace(/\s+/g, '-').toLowerCase()}` },
      update: {},
      create: {
        id: `video-${video.title.replace(/\s+/g, '-').toLowerCase()}`,
        ...video,
      },
    });
  }

  console.log('‚úÖ Sample videos created');

  // Create contact info
  await prisma.contactInfo.upsert({
    where: { id: 'default-contact' },
    update: {},
    create: {
      id: 'default-contact',
      phone: '0123456789',
      facebookUrl: 'https://facebook.com/phinpt',
      zaloUrl: 'https://zalo.me/0123456789',
      email: 'contact@phinpt.com',
    },
  });

  console.log('‚úÖ Contact info created');

  // Create home content
  await prisma.homeContent.upsert({
    where: { id: 'default-home' },
    update: {},
    create: {
      id: 'default-home',
      heroTitle: 'Phi Nguy·ªÖn Personal Trainer',
      heroSubtitle: 'Chuy√™n gia hu·∫•n luy·ªán c√° nh√¢n - Gi√∫p b·∫°n ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u fitness',
      aboutText: 'V·ªõi h∆°n 5 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c fitness, t√¥i cam k·∫øt mang ƒë·∫øn cho b·∫°n ch∆∞∆°ng tr√¨nh t·∫≠p luy·ªán hi·ªáu qu·∫£ v√† ph√π h·ª£p nh·∫•t.',
      servicesTitle: 'D·ªãch v·ª• c·ªßa t√¥i',
      services: [
        'T∆∞ v·∫•n ch·∫ø ƒë·ªô t·∫≠p luy·ªán c√° nh√¢n',
        'Thi·∫øt k·∫ø ch∆∞∆°ng tr√¨nh dinh d∆∞·ª°ng',
        'Theo d√µi ti·∫øn ƒë·ªô v√† ƒëi·ªÅu ch·ªânh',
        'H·ªó tr·ª£ 24/7 qua c√°c k√™nh li√™n l·∫°c',
      ],
    },
  });

  console.log('‚úÖ Home content created');

  // Create sample workout plan
  const workoutPlan = await prisma.workoutPlan.create({
    data: {
      name: 'Beginner Workout Plan',
      clientId: client.id,
      trainerId: admin.id,
      weekNumber: 1,
      startDate: new Date(),
      createdBy: 'admin',
      days: {
        create: [
          {
            day: 'Monday',
            isRestDay: false,
            dayOrder: 0,
            exercises: {
              create: [
                {
                  name: 'Push-ups',
                  exerciseOrder: 0,
                  sets: {
                    create: [
                      { setNumber: 1, reps: 10, reality: 10, weight: 0, volume: 0 },
                      { setNumber: 2, reps: 10, reality: 8, weight: 0, volume: 0 },
                      { setNumber: 3, reps: 10, reality: 12, weight: 0, volume: 0 },
                    ],
                  },
                },
              ],
            },
          },
          {
            day: 'Tuesday',
            isRestDay: true,
            dayOrder: 1,
          },
        ],
      },
    },
  });

  console.log('‚úÖ Sample workout plan created');

  // Create sample meal plan
  const mealPlan = await prisma.mealPlan.create({
    data: {
      name: 'Weight Loss Meal Plan',
      clientId: client.i,
      totalCalories: 1500,
      notes: 'Follow this plan for 4 weeks',
      meals: {
        create: [
          {
            name: 'Breakfast',
            totalCalories: 400,
            mealOrder: 0,
            foods: {
              create: [
                {
                  name: 'Oatmeal',
                  macroType: MacroType.CARB,
                  calories: 200,
                  notes: 'With milk',
                  foodOrder: 0,
                },
                {
                  name: 'Banana',
                  macroType: MacroType.CARB,
                  calories: 100,
                  foodOrder: 1,
                },
                {
                  name: 'Almonds',
                  macroType: MacroType.FAT,
                  calories: 100,
                  foodOrder: 2,
                },
              ],
            },
          },
        ],
      },
    },
  });

  console.log('‚úÖ Sample meal plan created');

  // Create sample weight records
  const today = new Date();
  for (let i = 0; i < 10; i++) {
    const date = new Date(today);
    date.setDate(date.getDate() - i * 7); // Weekly records
    
    await prisma.weightRecord.create({
      data: {
        clientId: client.id,
        weight: 75 - i * 0.5, // Gradual weight loss
        date,
        notes: i === 0 ? 'Feeling great!' : undefined,
      },
    });
  }

  console.log('‚úÖ Sample weight records created');

  console.log('üéâ Database seeding completed successfully!');
  console.log('\nüìã Login credentials:');
  console.log('Admin: admin@phinpt.com / admin123');
  console.log('Client: client@example.com / client123');
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });