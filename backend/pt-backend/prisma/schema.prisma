// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum MacroType {
  CARB
  PRO
  FAT
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  fullName  String   @map("full_name")
  phone     String?
  role      UserRole @default(CLIENT)
  avatar    String?
  startDate DateTime @default(now()) @map("start_date")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  workoutPlansAsClient WorkoutPlan[] @relation("ClientWorkoutPlans")
  workoutPlansAsTrainer WorkoutPlan[] @relation("TrainerWorkoutPlans")
  mealPlans            MealPlan[]
  weightRecords        WeightRecord[]

  @@map("users")
}

model WorkoutPlan {
  id         String   @id @default(cuid())
  name       String
  clientId   String   @map("client_id")
  trainerId  String?  @map("trainer_id")
  weekNumber Int      @default(1) @map("week_number")
  startDate  DateTime @default(now()) @map("start_date")
  createdBy  String   @default("admin") @map("created_by")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  client   User        @relation("ClientWorkoutPlans", fields: [clientId], references: [id], onDelete: Cascade)
  trainer  User?       @relation("TrainerWorkoutPlans", fields: [trainerId], references: [id])
  days     WorkoutDay[]

  @@map("workout_plans")
}

model WorkoutDay {
  id            String    @id @default(cuid())
  workoutPlanId String    @map("workout_plan_id")
  day           String
  isRestDay     Boolean   @default(false) @map("is_rest_day")
  dayOrder      Int       @default(0) @map("day_order")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  workoutPlan WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  exercises   Exercise[]

  @@map("workout_days")
}

model Exercise {
  id           String     @id @default(cuid())
  workoutDayId String     @map("workout_day_id")
  name         String
  exerciseOrder Int       @default(0) @map("exercise_order")
  createdAt    DateTime   @default(now()) @map("created_at")

  // Relations
  workoutDay WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  sets       ExerciseSet[]

  @@map("exercises")
}

model ExerciseSet {
  id         String  @id @default(cuid())
  exerciseId String  @map("exercise_id")
  setNumber  Int     @map("set_number")
  reps       Int
  reality    Int?
  weight     Float?  @default(0)
  volume     Float?  @default(0)
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("exercise_sets")
}

model MealPlan {
  id            String   @id @default(cuid())
  name          String   @default("Meal Plan")
  clientId      String   @map("client_id")
  totalCalories Int      @default(0) @map("total_calories")
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  client User   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  meals  Meal[]

  @@map("meal_plans")
}

model Meal {
  id            String   @id @default(cuid())
  mealPlanId    String   @map("meal_plan_id")
  name          String
  totalCalories Int      @default(0) @map("total_calories")
  mealOrder     Int      @default(0) @map("meal_order")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  mealPlan MealPlan   @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  foods    MealFood[]

  @@map("meals")
}

model MealFood {
  id        String    @id @default(cuid())
  mealId    String    @map("meal_id")
  name      String
  macroType MacroType @map("macro_type")
  calories  Int       @default(0)
  notes     String?
  foodOrder Int       @default(0) @map("food_order")
  createdAt DateTime  @default(now()) @map("created_at")

  // Relations
  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@map("meal_foods")
}

model WeightRecord {
  id        String   @id @default(cuid())
  clientId  String   @map("client_id")
  weight    Float
  date      DateTime @default(now())
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("weight_records")
}

model Testimonial {
  id           String   @id @default(cuid())
  name         String
  content      String   @db.Text
  rating       Int      @default(5)
  avatar       String?
  beforeImage  String?  @map("before_image")
  afterImage   String?  @map("after_image")
  isPublished  Boolean  @default(true) @map("is_published")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("testimonials")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  youtubeId   String   @map("youtube_id")
  description String   @db.Text
  category    String   @default("General")
  isPublished Boolean  @default(true) @map("is_published")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("videos")
}

model ContactInfo {
  id          String   @id @default(cuid())
  phone       String
  facebookUrl String   @map("facebook_url")
  zaloUrl     String   @map("zalo_url")
  email       String
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("contact_info")
}

model HomeContent {
  id             String   @id @default(cuid())
  heroTitle      String   @map("hero_title")
  heroSubtitle   String   @map("hero_subtitle") @db.Text
  heroImage      String?  @map("hero_image")
  aboutText      String   @map("about_text") @db.Text
  aboutImage     String?  @map("about_image")
  servicesTitle  String   @map("services_title")
  services       Json     @default("[]")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("home_content")
}